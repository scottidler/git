#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import re
import sys
import requests
sys.dont_write_bytecode = True

from argparse import ArgumentParser

class UnexpectedResponseError(Exception):
    def __init__(self, status_code, text):
        message = '{status_code}: {text}'.format(**locals())
        super(UnexpectedResponseError, self).__init__(message)

class InvalidGithubNameError(Exception):
    def __init__(self, github_name):
        message = 'invalid github_name: ' + github_name
        super(InvalidGithubNameError, self).__init__(message)

class InvalidGithubUrlError(Exception):
    def __init__(self, url):
        message = 'invalid github url error: ' + url
        super(InvalidGithubUrlError, self).__init__(message)

def get_reponames(github_type, github_name):
    reponames = []
    page = 1
    base = 'https://api.github.com'
    url = '{base}/{github_type}/{github_name}/repos?page={page}'.format(**locals())
    response = requests.get(url)
    if response.status_code == 404:
        if "Not Found" == response.json()['message']:
            raise InvalidGithubNameError(github_name)
        raise UnexpectedResponseError(response.status_code, response.text)
    if response.status_code != 200:
        raise UnexpectedResponseError(response.status_code, response.text)
    while response.status_code == 200:
        for repo in response.json():
            full_name = repo['full_name']
            reponames += [repo['full_name']]
        page += 1
        url = '{base}/{github_type}/{github_name}/repos?page={page}'.format(**locals())
        response = requests.get(url)
    return reponames

def get_github_reponames(github_name):
    base = 'https://github.com'
    url = '{base}/{github_name}'.format(**locals())
    response = requests.get(url)
    if response.status_code != 200:
        raise InvalidGithubUrlError(url)
    for github_type in ('orgs', 'users'):
        try:
            return get_reponames(github_type, github_name)
        except InvalidGithubNameError:
            continue

def print_org_repos(reponames):
    for reponame in reponames:
        print('https://github.com/' + reponame)

if __name__ == '__main__':
    parser = ArgumentParser()
    parser.add_argument(
        'github_name',
        metavar='github-name',
        help='github org or user name')

    ns = parser.parse_args()
    reponames = get_github_reponames(**ns.__dict__)
    print_org_repos(reponames)

