#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import re
import sys
import argparse
import importlib

sys.dont_write_bytecode = True

from configparser import ConfigParser
from pprint import pprint
from subprocess import CalledProcessError

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

REAL_FILE = os.path.abspath(__file__)
REAL_NAME = os.path.basename(REAL_FILE)
REAL_PATH = os.path.dirname(REAL_FILE)
if os.path.islink(__file__):
    LINK_FILE = REAL_FILE; REAL_FILE = os.path.abspath(os.readlink(__file__))
    LINK_NAME = REAL_NAME; REAL_NAME = os.path.basename(REAL_FILE)
    LINK_PATH = REAL_PATH; REAL_PATH = os.path.dirname(REAL_FILE)

GIT_PY = f'{REAL_PATH}/../git.py'

git = importlib.machinery.SourceFileLoader('git', GIT_PY).load_module()
CONFIGS = [
    '~/.config/clone/clone.cfg',
    f'{REAL_PATH}/../cfg/clone.cfg',
]

class FailedDiscover(Exception):
    def __init__(self, repospec, remotes):
        message = ' '.join([remote + repospec for remote in remotes])
        super(FailedDiscover, self).__init__(message)

def load_config(filenames):
    for filename in filenames:
        filename = os.path.abspath(os.path.expanduser(filename))
        parser = ConfigParser()
        cfg = {}
        if os.path.isfile(filename):
            parser.read(filename)
            for name, value in parser.items('clone'):
                if '\n' in value:
                    value = value.strip().split('\n')
                cfg[name] = value
            orgs = {}
            for section in parser.sections():
                if section.startswith('org.'):
                    orgs[section[len('org.'):]] = {
                        'username': parser[section].get('username', None),
                        'useremail': parser[section].get('useremail', None),
                    }
            cfg['orgs'] = orgs
            return cfg

def discover(repospec, remotes=None, verbose=False):
    pattern = '((git|ssh|https?|rsync)://)(\w+@)?([\w\.]+)(:(\d+))?[:/]{1,2}'
    regex = re.compile(pattern)
    match = regex.match(repospec)
    if match:
        remote = match.group(0)
        reponame = os.path.splitext(repospec[len(remote):])[0]
        return remote, reponame
    for remote in remotes:
        if verbose:
            print(f'remote = {remote}')
        repourl = os.path.join(remote, repospec)
        if verbose:
            print(f'repourl = {repourl}')
        exitcode, stdout, stderr = git.ls_remote(repourl, throw=False, verbose=verbose)
        if 0 == exitcode:
            return remote, repospec
    raise FailedDiscover(repospec, remotes)

def divine(reponame, cfg):
    project = os.path.dirname(reponame)
    default = cfg['orgs'].get('default', {})
    org = cfg['orgs'].get(project, {})
    username = org.get('username', default.get('username', None))
    useremail = org.get('useremail', default.get('useremail', None))
    return username, useremail

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--configs',
        metavar='FILE',
        default=CONFIGS,
        nargs='+',
        help='default="%(default)s"; list of configs to try; loads first found')
    parser.add_argument(
        '--remote',
        metavar='URL',
        help='the git url to be used with git clone')
    parser.add_argument(
        '--clonepath',
        metavar='PATH',
        default=os.getcwd(),
        help='path to store all cloned repos')
    parser.add_argument(
        '--mirrorpath',
        metavar='PATH',
        help='path to cached repos to support fast cloning')
    parser.add_argument(
        '--versioning',
        action='store_true',
        help='turn on versioning; checkout in reponame/commit rather than reponame')
    parser.add_argument(
        '--verbose',
        action='store_true',
        help='turn on verbose output')
    parser.add_argument(
        'repospec',
        help='repospec schema is remote?reponame')
    parser.add_argument(
        'revision',
        default='HEAD',
        nargs='?',
        help='revision')

    ns = parser.parse_args()
    locals().update(ns.__dict__)
    cfg = load_config(configs)
    remotes = cfg.get('remotes', [])
    remote, reponame = discover(repospec, remotes, verbose)
    username, useremail = divine(reponame, cfg)
    if verbose:
        print(f'remote = {remote}, reponame = {reponame}')
    print(
        git.clone(
            remote,
            reponame,
            revision,
            clonepath,
            mirrorpath,
            username,
            useremail,
            versioning))
