#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import argparse

from importlib.machinery import SourceFileLoader
from configparser import ConfigParser

sys.dont_write_bytecode = True


def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


REAL_FILE = os.path.abspath(__file__)
REAL_NAME = os.path.basename(REAL_FILE)
REAL_PATH = os.path.dirname(REAL_FILE)
if os.path.islink(__file__):
    LINK_FILE = REAL_FILE; REAL_FILE = os.path.abspath(os.readlink(__file__))
    LINK_NAME = REAL_NAME; REAL_NAME = os.path.basename(REAL_FILE)
    LINK_PATH = REAL_PATH; REAL_PATH = os.path.dirname(REAL_FILE)

CONFIGS = [
    '~/.config/clone/clone.cfg',
    f'{REAL_PATH}/../cfg/clone.cfg',
]
GIT_PY = f'{REAL_PATH}/../git.py'
git = SourceFileLoader('git', GIT_PY).load_module()


class FailedDiscover(Exception):
    def __init__(self, repospec, remotes):
        message = ' '.join([remote + repospec for remote in remotes])
        super(FailedDiscover, self).__init__(message)


def load_config(filenames):
    for filename in filenames:
        filename = os.path.abspath(os.path.expanduser(filename))
        parser = ConfigParser()
        cfg = {}
        if os.path.isfile(filename):
            parser.read(filename)
            for name, value in parser.items('clone'):
                if '\n' in value:
                    value = value.strip().split('\n')
                cfg[name] = value
            orgs = {}
            for section in parser.sections():
                if section.startswith('org.'):
                    orgs[section[len('org.'):]] = {
                        'name': parser[section].get('name', None),
                        'email': parser[section].get('email', None),
                        'signingkey': parser[section].get('signingkey', None),
                        'sshkey': parser[section].get('sshkey', None),
                        'remote_type': parser[section].get('remote_type', 'ssh'),
                    }
            cfg['orgs'] = orgs
            return cfg


def discover(repospec, cfg, verbose=False):
    org_slug, repo_name = repospec.split('/')
    remote_type = cfg['orgs'].get(org_slug, {}).get('remote_type', 'ssh')
    if remote_type == 'ssh':
        remote = "git@github.com"
    elif remote_type == 'https':
        remote = "https://github.com"
    else:
        raise ValueError(f"Invalid remote_type: {remote_type}")

    return remote, f"{org_slug}/{repo_name}"


def divine(reponame, cfg, verbose=False):
    org_slug = reponame.split('/')[0]
    default = cfg['orgs'].get('default', {})
    org = cfg['orgs'].get(org_slug, {})
    name = org.get('name', default.get('name', None))
    email = org.get('email', default.get('email', None))
    signingkey = org.get('signingkey', default.get('signingkey', None))
    sshkey = org.get('sshkey', default.get('sshkey', None))
    return name, email, signingkey, sshkey


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--configs',
        metavar='FILE',
        default=CONFIGS,
        nargs='+',
        help='default="%(default)s"; list of configs to try; loads first found')
    parser.add_argument(
        '--remote',
        metavar='URL',
        help='the git url to be used with git clone')
    parser.add_argument(
        '--clonepath',
        metavar='PATH',
        default=os.getcwd(),
        help='path to store all cloned repos')
    parser.add_argument(
        '--mirrorpath',
        metavar='PATH',
        help='path to cached repos to support fast cloning')
    parser.add_argument(
        '--versioning',
        action='store_true',
        help='turn on versioning; checkout in reponame/commit rather than reponame')
    parser.add_argument(
        '--verbose',
        action='store_true',
        help='turn on verbose output')
    parser.add_argument(
        'repospec',
        help='repospec schema is remote?reponame')
    parser.add_argument(
        'revision',
        default='HEAD',
        nargs='?',
        help='revision')

    ns = parser.parse_args()
    locals().update(ns.__dict__)
    cfg = load_config(configs)
    remotes = cfg.get('remotes', [])
    remote, reponame = discover(repospec, cfg, verbose)
    name, email, signingkey, sshkey = divine(reponame, cfg, verbose)
    if verbose:
        print(f'remote = {remote}, reponame = {reponame}')
    if sshkey:
        os.environ['GIT_SSH_COMMAND'] = f'ssh -i {sshkey}'
    else:
        print('no sshkey')
    print(
        git.clone(
            remote,
            reponame,
            revision,
            clonepath,
            mirrorpath,
            name,
            email,
            signingkey,
            versioning))
