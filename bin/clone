#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import logging
import argparse

from importlib.machinery import SourceFileLoader
from configparser import ConfigParser
from logging.handlers import RotatingFileHandler

sys.dont_write_bytecode = True


LOG_LEVEL = logging.getLevelName(os.environ.get('LOG_LEVEL', 'INFO').upper())
LOG_DEST = os.environ.get('LOG_DEST', os.path.join('/var/log/clone', 'clone.log'))
CONFIGS = [
    '~/.config/clone/clone.cfg',
]

def git_py():
    script_path = os.path.realpath(__file__)
    script_dir = os.path.dirname(script_path)
    return os.path.abspath(os.path.join(script_dir, '../git.py'))

git = SourceFileLoader('git', git_py()).load_module()


def setup_logging(log_level, log_dest):
    root_logger = logging.getLogger()
    root_logger.setLevel(log_level)
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    if log_dest != 'stderr':
        file_handler = RotatingFileHandler(log_dest, maxBytes=1e6, backupCount=3)
        file_handler.setFormatter(formatter)
        root_logger.addHandler(file_handler)
    else:
        stream_handler = logging.StreamHandler()
        stream_handler.setFormatter(formatter)
        root_logger.addHandler(stream_handler)


def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


class FailedDiscover(Exception):
    def __init__(self, repospec, remotes):
        message = ' '.join([remote + repospec for remote in remotes])
        super(FailedDiscover, self).__init__(message)


def load_config(filenames):
    logging.debug(f'load_config: filenames={filenames}')
    for filename in filenames:
        filename = os.path.abspath(os.path.expanduser(filename))
        parser = ConfigParser()
        cfg = {}
        if os.path.isfile(filename):
            parser.read(filename)
            for name, value in parser.items('clone'):
                if '\n' in value:
                    value = value.strip().split('\n')
                cfg[name] = value
            orgs = {}
            for section in parser.sections():
                if section.startswith('org.'):
                    orgs[section[len('org.'):]] = {
                        'name': parser[section].get('name', None),
                        'email': parser[section].get('email', None),
                        'signingkey': parser[section].get('signingkey', None),
                        'sshkey': parser[section].get('sshkey', None),
                        'remote_type': parser[section].get('remote_type', 'ssh'),
                    }
            cfg['orgs'] = orgs
            return cfg


def discover(repospec, cfg, verbose=False):
    logging.debug(f'discover: repospec={repospec} cfg={cfg} verbose={verbose}')
    org_slug, repo_name = repospec.split('/')
    remote_type = cfg['orgs'].get(org_slug, {}).get('remote_type', 'ssh')
    if remote_type == 'ssh':
        remote = "git@github.com"
    elif remote_type == 'https':
        remote = "https://github.com"
    else:
        raise ValueError(f"Invalid remote_type: {remote_type}")

    return remote, f"{org_slug}/{repo_name}"


def divine(reponame, cfg, verbose=False):
    logging.debug(f'divine: reponame={reponame} cfg={cfg} verbose={verbose}')
    org_slug = reponame.split('/')[0]
    default = cfg['orgs'].get('default', {})
    org = cfg['orgs'].get(org_slug, {})
    name = org.get('name', default.get('name', None))
    email = org.get('email', default.get('email', None))
    signingkey = org.get('signingkey', default.get('signingkey', None))
    sshkey = org.get('sshkey', default.get('sshkey', None))
    return name, email, signingkey, sshkey


def main(args):
    setup_logging(LOG_LEVEL, LOG_DEST)
    logging.info('*' * 80)
    logging.info(f'main: args={args}')
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--configs',
        metavar='FILE',
        default=CONFIGS,
        nargs='+',
        help='default="%(default)s"; list of configs to try; loads first found')
    parser.add_argument(
        '--remote',
        metavar='URL',
        help='the git url to be used with git clone')
    parser.add_argument(
        '--clonepath',
        metavar='PATH',
        default=os.getcwd(),
        help='path to store all cloned repos')
    parser.add_argument(
        '--mirrorpath',
        metavar='PATH',
        help='path to cached repos to support fast cloning')
    parser.add_argument(
        '--versioning',
        action='store_true',
        help='turn on versioning; checkout in reponame/commit rather than reponame')
    parser.add_argument(
        '--verbose',
        action='store_true',
        help='turn on verbose output')
    parser.add_argument(
        'repospec',
        help='repospec schema is remote?reponame')
    parser.add_argument(
        'revision',
        default='HEAD',
        nargs='?',
        help='revision')

    ns, rem = parser.parse_known_args(args)
    cfg = load_config(ns.configs)
    remote, reponame = discover(ns.repospec, cfg, ns.verbose)
    name, email, signingkey, sshkey = divine(reponame, cfg, ns.verbose)
    if ns.verbose:
        print(f'remote = {remote}, reponame = {reponame}')
    if sshkey:
        os.environ['GIT_SSH_COMMAND'] = f'ssh -i {sshkey}'
    else:
        print('no sshkey')
    print(
        git.clone(
            remote,
            reponame,
            ns.revision,
            ns.clonepath,
            ns.mirrorpath,
            name,
            email,
            signingkey,
            ns.versioning))


if __name__ == '__main__':
    main(sys.argv[1:])
